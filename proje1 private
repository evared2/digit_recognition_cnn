import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist

# Φόρτωση των δεδομένων MNIST (60k εικόνες για εκπαίδευση, 10k εικόνες για δοκιμές)
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Προετοιμασία των δεδομένων
train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))  # 28x28 εικόνες με 1 κανάλι (άσπρο-μαύρο)
test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))

# Κανονικοποίηση των εικόνων (0-255 -> 0-1)
train_images, test_images = train_images / 255.0, test_images / 255.0

# Δημιουργία του μοντέλου CNN
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')  # 10 κατηγορίες για τα ψηφία 0-9
])

# Συνοπτική περιγραφή του μοντέλου
model.summary()

# Σύνθεση του μοντέλου (ορισμός optimizer, loss function και metrics)
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Εκπαίδευση του μοντέλου
history = model.fit(train_images, train_labels, epochs=5, batch_size=64, validation_data=(test_images, test_labels))

# Αξιολόγηση του μοντέλου με τα δεδομένα δοκιμής
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"Test accuracy: {test_acc}")

# Αποθήκευση του μοντέλου για μελλοντική χρήση
model.save('mnist_cnn_model.h5')

# Οπτικοποίηση της ιστορίας εκπαίδευσης (ακρίβεια και απώλεια)
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.title('Model Accuracy')
plt.savefig('accuracy_plot.png')
plt.show()

# Προβλέψεις με το εκπαιδευμένο μοντέλο
predictions = model.predict(test_images)

# Εμφάνιση παραδείγματος πρόβλεψης
fig, axes = plt.subplots(1, 5, figsize=(10, 5))
for i in range(5):
    axes[i].imshow(test_images[i].reshape(28, 28), cmap='gray')
    axes[i].set_title(f"Pred: {np.argmax(predictions[i])}, True: {test_labels[i]}")
    axes[i].axis('off')

# Αποθήκευση παραδείγματος πρόβλεψης
plt.savefig('example_predictions.png')
plt.show()









#Εξήγηση του Κώδικα:

    Φόρτωση των Δεδομένων:
    Χρησιμοποιούμε την mnist.load_data() για να φορτώσουμε τα δεδομένα και τα διαχωρίζουμε σε δεδομένα εκπαίδευσης και δοκιμής.

    Προετοιμασία των Δεδομένων:
    Προσαρμόζουμε τις εικόνες ώστε να έχουν διάσταση (28, 28, 1) και τις κανονικοποιούμε από την κλίμακα [0, 255] σε [0, 1].

    Δημιουργία του CNN:
    Το μοντέλο έχει τρία convolutional layers (για χαρακτηριστικά), με max pooling για μείωση των διαστάσεων και δύο dense layers για ταξινόμηση.

    Σύνθεση του Μοντέλου:
    Χρησιμοποιούμε Adam optimizer και sparse_categorical_crossentropy loss, καθώς το πρόβλημα είναι πολυκατηγορικό (10 κατηγορίες).

    Εκπαίδευση και Αξιολόγηση:
    Εκπαιδεύουμε το μοντέλο για 5 epochs και αξιολογούμε την ακρίβεια του σε δεδομένα δοκιμής.

    Αποθήκευση Αποτελεσμάτων:
    Αποθηκεύουμε την ακρίβεια και το παράδειγμα προβλέψεων σε εικόνες.

Περίληψη:

Αυτός ο κώδικας δημιουργεί ένα CNN για την ταξινόμηση χειρόγραφων ψηφίων από το MNIST dataset, εκπαιδεύει το μοντέλο, το αξιολογεί και αποθηκεύει τα αποτελέσματα.

Πριν τον εκτελέσεις:

    Βεβαιώσου ότι έχεις εγκατεστημένο το TensorFlow με την εντολή:

pip install tensorflow




